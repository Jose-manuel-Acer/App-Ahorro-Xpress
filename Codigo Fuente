// Importaciones necesarias
import 'package:flutter/material.dart'; // Framework principal de Flutter
import 'package:flutter/services.dart'; // Permite el uso de formatos y restricciones en entradas de texto
import 'package:google_maps_flutter/google_maps_flutter.dart'; // Biblioteca para integrar Google Maps en Flutter

// Punto de entrada principal de la aplicación
void main() {
  runApp(MyApp());
}

// Widget principal de la aplicación
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // Define la pantalla inicial de la aplicación
      home: FirstScreen(), // Pantalla inicial configurada como 'FirstScreen'
    );
  }
}

// Primera pantalla que se muestra al abrir la aplicación
class FirstScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue, // Fondo azul para la pantalla inicial
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, // Centra los elementos en la pantalla
          children: [
            Image.asset('assets/AEx1.png'), // Muestra una imagen desde los assets
            SizedBox(height: 50), // Espaciado entre la imagen y el botón
            IconButton(
              icon: Icon(Icons.arrow_forward), // Ícono de flecha hacia adelante
              color: Colors.white, // Color del ícono
              iconSize: 40.0, // Tamaño del ícono
              onPressed: () {
                // Acción al presionar el ícono
                // Navega a la pantalla de Login
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LoginScreen()),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
// Pantalla de registro de usuario
class RegisterScreen extends StatelessWidget {
  // Controladores para los campos de texto
  final TextEditingController nameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white, // Fondo blanco para la pantalla de registro
      body: Center(
        child: SingleChildScrollView(
          child: Container(
            decoration: BoxDecoration(
              border: Border.all(color: Colors.blue), // Borde azul alrededor del formulario
              boxShadow: [
                BoxShadow(
                  color: const Color.fromARGB(255, 255, 254, 254),
                  blurRadius: 5.0, // Sombra sutil para el formulario
                ),
              ],
            ),
            padding: EdgeInsets.all(16.0), // Espaciado interno del formulario
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  'Registro',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue, // Título en azul
                  ),
                ),
                SizedBox(height: 20), // Espaciado entre el título y los campos
                // Campos de entrada
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    hintText: 'Nombre',
                    hintStyle: TextStyle(
                      color: const Color.fromARGB(255, 3, 3, 3).withOpacity(0.6),
                    ),
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10), // Espaciado entre los campos
                TextField(
                  controller: lastNameController,
                  decoration: InputDecoration(
                    hintText: 'Apellidos',
                    hintStyle: TextStyle(
                      color: const Color.fromARGB(255, 0, 0, 0).withOpacity(0.6),
                    ),
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: emailController,
                  decoration: InputDecoration(
                    hintText: 'Correo electrónico',
                    hintStyle: TextStyle(
                      color: const Color.fromARGB(255, 0, 0, 0).withOpacity(0.6),
                    ),
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: usernameController,
                  decoration: InputDecoration(
                    hintText: 'Usuario',
                    hintStyle: TextStyle(
                      color: const Color.fromARGB(255, 2, 2, 2).withOpacity(0.6),
                    ),
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: passwordController,
                  obscureText: true, // Oculta el texto ingresado
                  decoration: InputDecoration(
                    hintText: 'Contraseña',
                    hintStyle: TextStyle(
                      color: const Color.fromARGB(255, 0, 0, 0).withOpacity(0.6),
                    ),
                    border: OutlineInputBorder(),
                  ),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    // Validaciones de los campos
                    if (!RegExp(r'^[A-Z][a-z]{5}[0-9]$')
                        .hasMatch(usernameController.text)) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            'El usuario debe tener 1 mayúscula, 5 minúsculas y 1 número.',
                          ),
                        ),
                      );
                      return;
                    }
                    if (!RegExp(r'^\d{5}[A-Z]$')
                        .hasMatch(passwordController.text)) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            'La contraseña debe tener 5 números seguidos y 1 mayúscula.',
                          ),
                        ),
                      );
                      return;
                    }

                    // Mostrar diálogo emergente y navegar a LoginScreen
                    showDialog(
                      context: context,
                      barrierDismissible: false,
                      builder: (context) => AlertDialog(
                        title: Text('Guardado'),
                        content: Text(
                          'Tu usuario y contraseña han sido registrados correctamente.',
                        ),
                        actions: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context); // Cierra el diálogo
                              Navigator.pushReplacement(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => WelcomeScreen(
                                    registeredUser: '',
                                  ),
                                ),
                              );
                            },
                            child: Text('Aceptar'),
                          ),
                        ],
                      ),
                    );
                  },
                  child: Text('Guardar'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
// Pantalla de inicio de sesión
class LoginScreen extends StatelessWidget {
  // Controladores para los campos de texto
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de aplicación con color de fondo azul
      appBar: AppBar(
        backgroundColor: Colors.blue,
        // Botón de menú en la esquina izquierda
        leading: IconButton(
          icon: Icon(Icons.menu, color: Colors.white), // Icono de menú
          onPressed: () {
            // Navega a la pantalla de menú
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => MenuScreen()),
            );
          },
        ),
        // Título de la barra de aplicación con una imagen
        title: Image.asset(
          'assets/AEx1.png', // Ruta de la imagen en los assets
          height: 50,
        ),
        centerTitle: true, // Centra el título en la barra
        actions: [
          // Botón de calculadora en la esquina derecha
          IconButton(
            icon: Icon(Icons.calculate, color: Colors.white), // Icono de calculadora
            onPressed: () {
              // Navega a la pantalla de presupuesto
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => BudgetScreen()),
              );
            },
          ),
        ],
      ),
      // Cuerpo de la pantalla con desplazamiento
      body: SingleChildScrollView(
        // Solución para evitar desbordamientos en pantallas pequeñas
        child: Column(
          children: [
            SizedBox(height: 20), // Espaciado opcional
            Container(
              color: Colors.blue[50], // Fondo azul claro para el contenedor
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Imagen en la parte inferior de la pantalla
                  Image.asset(
                    'assets/AEx1.png', // Ruta de la imagen en los assets
                    width: double.infinity, // Ancho completo
                    fit: BoxFit.cover, // Ajuste de la imagen
                  ),
                  Padding(
                    padding: const EdgeInsets.all(16.0), // Espaciado interno
                    child: Column(
                      children: [
                        // Texto de bienvenida
                        Text(
                          'Hola, ten un buen día!',
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        SizedBox(height: 10), // Espaciado entre el texto y los botones
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Flexible(
                              flex: 2,
                              child: Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                child: ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.red, // Botón rojo
                                  ),
                                  onPressed: () {
                                    // Navega a la pantalla de registro
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) => RegisterScreen()),
                                    );
                                  },
                                  child: Text('Registrarse'),
                                ),
                              ),
                            ),
                            Flexible(
                              flex: 2,
                              child: Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                child: ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.white,
                                    foregroundColor: Colors.black,
                                  ),
                                  onPressed: () {
                                    // Navega a la pantalla de inicio de sesión
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                          builder: (context) => NextScreen()),
                                    );
                                  },
                                  child: Text('Iniciar sesión'),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
// Definición de la clase NextScreen que extiende StatelessWidget
class NextScreen extends StatelessWidget {
  // Controladores para los campos de texto de usuario y contraseña
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de aplicación con título "Inicio de sesión"
      appBar: AppBar(
        title: Text('Inicio de sesión'),
      ),
      // Cuerpo de la pantalla con un Padding para el espaciado
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Logo en la parte superior
            Image.asset(
              'assets/AEX2.1.png', // Ruta de la imagen del logo
              height: 100, // Altura de la imagen
            ),
            SizedBox(height: 20), // Espaciado entre la imagen y el texto
            // Etiqueta "Inicio de sesión"
            Text(
              'Inicio de sesión',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 40), // Espaciado entre el texto y los campos de texto
            // Primer campo de texto para el usuario
            TextField(
              controller: _usernameController, // Asignación del controlador
              decoration: InputDecoration(
                labelText: 'PON AQUÍ TU USUARIO', // Etiqueta del campo
                hintText: 'Ej: Usuario1', // Texto de sugerencia
                border: OutlineInputBorder(), // Borde del campo
              ),
              textCapitalization: TextCapitalization.words, // Capitaliza la primera letra de cada palabra
              inputFormatters: [
                // Restringe la entrada a una letra mayúscula seguida de letras y números
                FilteringTextInputFormatter.allow(
                    RegExp(r'^[A-Z][a-zA-Z0-9]*$'))
              ],
            ),
            SizedBox(height: 20), // Espaciado entre los campos de texto
            // Segundo campo de texto para la contraseña
            TextField(
              controller: _passwordController, // Asignación del controlador
              obscureText: true, // Oculta el texto ingresado
              decoration: InputDecoration(
                labelText: 'Contraseña', // Etiqueta del campo
                hintText: 'Ej: 12345A', // Texto de sugerencia
                border: OutlineInputBorder(), // Borde del campo
              ),
              keyboardType: TextInputType.number, // Tipo de teclado numérico
            ),
            SizedBox(height: 20), // Espaciado entre el campo de texto y el botón
            // Botón "INICIAR"
            ElevatedButton(
              onPressed: () {
                // Obtiene los valores ingresados en los campos de texto
                String username = _usernameController.text;
                String password = _passwordController.text;

                // Validación del usuario
                if (!RegExp(r'^[A-Z][a-z]*[0-9]$').hasMatch(username)) {
                  // Muestra un mensaje de error si la validación falla
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content:
                            Text('Usuario incorrecto. Verifica tu usuario.')),
                  );
                  return; // Detiene la ejecución si la validación falla
                }

                // Validación de la contraseña
                if (!RegExp(r'^\d{5}[A-Z]$').hasMatch(password)) {
                  // Muestra un mensaje de error si la validación falla
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Contraseña incorrecta.')),
                  );
                  return; // Detiene la ejecución si la validación falla
                }

                // Si ambas validaciones son correctas, navega a la pantalla WelcomeScreen
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => WelcomeScreen(registeredUser: ' ')),
                );
              },
              child: Text('INICIAR'), // Texto del botón
            ),
          ],
        ),
      ),
    );
  }
}

// Definición de la clase SupermarketMapScreen que extiende StatefulWidget
class SupermarketMapScreen extends StatefulWidget {
  final String supermarketName; // Nombre del supermercado
  final double latitude; // Latitud de la ubicación
  final double longitude; // Longitud de la ubicación

  // Constructor que requiere los parámetros mencionados
  SupermarketMapScreen({
    required this.supermarketName,
    required this.latitude,
    required this.longitude,
  });

  @override
  _SupermarketMapScreenState createState() => _SupermarketMapScreenState();
}
// Definición de la clase _SupermarketMapScreenState que extiende State<SupermarketMapScreen>
class _SupermarketMapScreenState extends State<SupermarketMapScreen> {
  // Controlador para el mapa de Google
  late GoogleMapController mapController;

  // Función que se llama cuando el mapa es creado
  void _onMapCreated(GoogleMapController controller) {
    mapController = controller; // Asigna el controlador del mapa
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de aplicación con título dinámico que muestra el nombre del supermercado
      appBar: AppBar(
        title: Text('Ubicación: ${widget.supermarketName}'),
        backgroundColor: Color(0xFF008080), // Color de fondo de la AppBar
      ),
      // Cuerpo de la pantalla con el widget GoogleMap
      body: GoogleMap(
        onMapCreated: _onMapCreated, // Asigna la función que se llama al crear el mapa
        initialCameraPosition: CameraPosition(
          target: LatLng(widget.latitude, widget.longitude), // Establece la posición inicial del mapa
          zoom: 14.0, // Nivel de zoom inicial
        ),
        markers: {
          // Marcador que indica la ubicación del supermercado
          Marker(
            markerId: MarkerId('supermarket_marker'),
            position: LatLng(widget.latitude, widget.longitude),
            infoWindow: InfoWindow(
              title: widget.supermarketName, // Título del marcador
              snippet: 'Ubicación de ${widget.supermarketName}', // Descripción del marcador
            ),
          ),
        },
      ),
    );
  }
}

// Definición de la clase WelcomeScreen que extiende StatelessWidget
class WelcomeScreen extends StatelessWidget {
  final String registeredUser; // Nombre del usuario registrado

  // Constructor que requiere el nombre del usuario registrado
  WelcomeScreen({required this.registeredUser});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF90EE90), // Color de fondo de la pantalla
      appBar: AppBar(
        title: Text('Bienvenido'),
        backgroundColor: Color(0xFF008080), // Color de fondo de la AppBar
      ),
      // Cuerpo de la pantalla con desplazamiento vertical
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center, // Centra el contenido verticalmente
            children: [
              // Contenedor que muestra un saludo con una carita feliz
              Container(
                margin: EdgeInsets.only(top: 40), // Margen superior
                padding: EdgeInsets.symmetric(vertical: 16, horizontal: 24), // Relleno interno
                decoration: BoxDecoration(
                  color: Color(0xFF008080), // Color de fondo del contenedor
                  borderRadius: BorderRadius.circular(8), // Bordes redondeados
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center, // Centra el contenido horizontalmente
                  children: [
                    Text(
                      'Hola!',
                      style: TextStyle(
                        color: Color(0xFFFFD700), // Color dorado del texto
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(width: 8), // Espacio entre el texto y la carita feliz
                    Text(
                      '😊', // Carita feliz
                      style: TextStyle(
                        fontSize: 24,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 20), // Espacio entre el saludo y el siguiente texto
              Text(
                '¿Te gustaría hacer una lista de compras?',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center, // Centra el texto
              ),
              SizedBox(height: 10), // Espacio entre el texto y el botón
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white, // Color de fondo del botón
                  foregroundColor: Colors.black, // Color del texto del botón
                ),
                onPressed: () {
                  // Navega a la pantalla de lista de compras
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ShoppingListScreen(),
                    ),
                  );
                },
                child: Text('Presiona Aquí'),
              ),
              SizedBox(height: 20), // Espacio entre el botón y el siguiente texto
              Text(
                'Elige tu supermercado favorito:',
                style: TextStyle(fontSize: 18),
                textAlign: TextAlign.center, // Centra el texto
              ),
              SizedBox(height: 20), // Espacio entre el texto y los botones de selección de supermercado

              // Sección para seleccionar el supermercado "Merco"
              SupermarketSection(
                label: 'Merco',
                cost: 'Costo de canasta básica: \$1200.00 MXN',
                latitude: 29.33125378974445,
                longitude: -100.97978453125438,
                onPressed: () {
                  // Navega a la pantalla del supermercado "Merco"
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          SupermarketScreen(supermarketName: 'Merco'),
                    ),
                  );
                },
              ),
              SizedBox(height: 10), // Espacio entre las secciones de supermercados
              // Sección para seleccionar el supermercado "Soriana"
              SupermarketSection(
                label: 'Soriana',
                cost: 'Costo de canasta básica: \$1500.00 MXN',
                latitude: 29.323877848488756,
                longitude: -100.95773389430599,
                onPressed: () {
                  // Navega a la pantalla del supermercado "Soriana"
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          SupermarketScreen(supermarketName: 'Soriana'),
                    ),
                  );
                },
              ),
              SizedBox(height: 10), // Espacio entre las secciones de supermercados
              // Sección para seleccionar el supermercado "Gutierrez"
              SupermarketSection(
                label: 'Gutierrez',
                cost: 'Costo de canasta básica: \$1450.00 MXN',
                latitude: 29.300961536803708,
                longitude: -100.96173333357605,
                onPressed: () {
                  // Navega a la pantalla del supermercado "Gutierrez"
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          SupermarketScreen(supermarketName: 'Gutierrez'),
                    ),
                  );
                },
              ),
              SizedBox(height: 10), // Espacio entre las secciones de supermercados
              // Sección para seleccionar el supermercado "Walmart"
              SupermarketSection(
                label: 'Walmart',
                cost: 'Costo de canasta básica: \$1850.00 MXN',
                latitude: 29.320021377
onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          SupermarketScreen(supermarketName: 'Walmart'),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Definición de la clase SupermarketSection que extiende StatelessWidget
class SupermarketSection extends StatelessWidget {
  final String label; // Nombre del supermercado
  final String cost; // Costo de la canasta básica en el supermercado
  final double latitude; // Latitud de la ubicación del supermercado
  final double longitude; // Longitud de la ubicación del supermercado
  final VoidCallback onPressed; // Función a ejecutar al presionar el botón

  // Constructor que inicializa los valores de la clase
  const SupermarketSection({
    required this.label, // Inicializa el nombre del supermercado
    required this.cost, // Inicializa el costo de la canasta básica
    required this.latitude, // Inicializa la latitud
    required this.longitude, // Inicializa la longitud
    required this.onPressed, // Inicializa la función que se ejecutará al presionar el botón
    Key? key, // Recibe una clave opcional para la identificación del widget
  }) : super(key: key); // Llama al constructor de la clase base (StatelessWidget)

  @override
  Widget build(BuildContext context) {
    return Container(
      // Define márgenes horizontales y verticales para el contenedor
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      // Añade relleno interno al contenedor
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white, // Establece el color de fondo del contenedor
        borderRadius: BorderRadius.circular(8), // Redondea las esquinas del contenedor
        boxShadow: [
          // Añade una sombra al contenedor para darle un efecto 3D
          BoxShadow(
            color: Colors.grey.withOpacity(0.5), // Sombra gris con opacidad
            blurRadius: 6, // Radio de difusión de la sombra
            offset: Offset(0, 3), // Desplazamiento de la sombra en el eje X y Y
          ),
        ],
      ),
      child: Column(
        children: [
          // Muestra el nombre del supermercado como un título
          Text(
            label,
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8), // Añade un espacio entre el nombre y el costo
          // Muestra el costo de la canasta básica
          Text(cost),
          const SizedBox(height: 8), // Añade un espacio entre el costo y los botones
          Row(
            mainAxisAlignment: MainAxisAlignment.center, // Centra los elementos dentro de la fila
            children: [
              // Botón para ver la canasta básica del supermercado
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal, // Color de fondo del botón
                  foregroundColor: Colors.white, // Color del texto del botón
                ),
                onPressed: onPressed, // Asigna la función al presionar el botón
                child: Text('Ver Canasta Básica'), // Texto que aparece en el botón
              ),
              const SizedBox(width: 16), // Espacio entre el botón y el siguiente ícono
              // Ícono que abre la ubicación en el mapa
              IconButton(
                icon: Icon(Icons.location_on, color: Colors.red, size: 30), // Ícono de ubicación
                onPressed: () {
                  // Navega a la pantalla de mapa mostrando la ubicación del supermercado
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => MapScreen(
                        supermarketName: label, // Pasa el nombre del supermercado
                        latitude: latitude, // Pasa la latitud
                        longitude: longitude, // Pasa la longitud
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}
// Definición de la clase MapScreen que extiende StatelessWidget
class MapScreen extends StatelessWidget {
  final String supermarketName; // Nombre del supermercado
  final double latitude; // Latitud de la ubicación del supermercado
  final double longitude; // Longitud de la ubicación del supermercado

  // Constructor que recibe los valores necesarios (nombre, latitud y longitud)
  const MapScreen({
    required this.supermarketName, // Inicializa el nombre del supermercado
    required this.latitude, // Inicializa la latitud
    required this.longitude, // Inicializa la longitud
    Key? key, // Clave opcional para el widget
  }) : super(key: key); // Llama al constructor de la clase base (StatelessWidget)

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación que muestra el nombre del supermercado
      appBar: AppBar(
        title: Text(supermarketName), // Título de la barra de la app con el nombre del supermercado
        backgroundColor: Color(0xFF008080), // Color de fondo de la barra de la app (teal)
      ),
      body: GoogleMap(
        // Configura la vista inicial del mapa con la latitud y longitud del supermercado
        initialCameraPosition: CameraPosition(
          target: LatLng(latitude, longitude), // Posición en el mapa
          zoom: 15, // Nivel de zoom inicial del mapa
        ),
        // Añade un marcador en la ubicación del supermercado
        markers: {
          Marker(
            markerId: MarkerId(supermarketName), // ID único para el marcador
            position: LatLng(latitude, longitude), // Posición del marcador
            infoWindow: InfoWindow(title: supermarketName), // Ventana de información con el nombre del supermercado
          ),
        },
      ),
    );
  }
}

// Pantalla que muestra una lista de los productos más vendidos (Top 10 productos)
class TopProductsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con el título 'Top 10 Productos'
      appBar: AppBar(
        title: Text('Top 10 Productos'), // Título en la barra de la app
        backgroundColor: Color(0xFF008080), // Color de fondo de la barra (teal)
      ),
      body: ListView(
        padding: EdgeInsets.all(16), // Espaciado alrededor de la lista
        children: List.generate(10, (index) {
          // Genera una lista de productos numerados del 1 al 10
          return ListTile(
            // Icono circular con el número del producto
            leading: CircleAvatar(
              backgroundColor: Colors.teal, // Color de fondo del círculo
              child: Text(
                '${index + 1}', // Número de producto
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),
            title: Text('Producto ${index + 1}'), // Título del producto
            subtitle: Text('Descripción del producto ${index + 1}'), // Descripción del producto
          );
        }),
      ),
    );
  }
}

// Botón reutilizable para mostrar supermercados en la aplicación
class SupermarketButton extends StatelessWidget {
  final String label; // Etiqueta del botón
  final VoidCallback onPressed; // Función a ejecutar cuando se presiona el botón

  // Constructor para inicializar la etiqueta y la acción a ejecutar al presionar el botón
  SupermarketButton({required this.label, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: Color(0xFF008080), // Color de fondo del botón (teal)
        foregroundColor: Color(0xFFFFD700), // Color del texto del botón (gold)
        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 20), // Relleno del botón
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8), // Bordes redondeados del botón
        ),
      ),
      onPressed: onPressed, // Asigna la función que se ejecutará al presionar el botón
      child: Text(
        label, // Etiqueta que se muestra en el botón
        style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold), // Estilo del texto en el botón
      ),
    );
  }
}

// Clase que representa la pantalla de un supermercado específico
class SupermarketScreen extends StatelessWidget {
  final String supermarketName; // Almacena el nombre del supermercado

  // Constructor que requiere el nombre del supermercado
  SupermarketScreen({required this.supermarketName});

  // Función para obtener la ruta del logo del supermercado según su nombre
  String getLogoPath() {
    switch (supermarketName) { // Compara el nombre del supermercado
      case 'Merco': 
        return 'assets/Mer1.png'; // Ruta para el logo de Merco
      case 'Soriana':
        return 'assets/sori2.png'; // Ruta para el logo de Soriana
      case 'Gutierrez':
        return 'assets/Gu3.png'; // Ruta para el logo de Gutierrez
      case 'Walmart':
        return 'assets/wal4.png'; // Ruta para el logo de Walmart
      default:
        return 'assets/de'; // Ruta por defecto en caso de que no coincida con ningún supermercado
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold( // Crea la estructura básica de la pantalla con barra de app y cuerpo
      appBar: AppBar( // Barra superior con título
        title: Text('Supermercado'), // Título de la pantalla
        backgroundColor: Color(0xFF008080), // Color de fondo de la barra
      ),
      body: Center( // Centra los elementos dentro del cuerpo de la pantalla
        child: Column( // Usa una columna para organizar los elementos verticalmente
          mainAxisAlignment: MainAxisAlignment.center, // Alineación central de los elementos
          children: [
            // Muestra el logo basado en el supermercado seleccionado
            Image.asset(
              getLogoPath(), // Llama a la función para obtener el logo del supermercado
              height: 100, // Ajusta el tamaño de la imagen en altura
              width: 100, // Ajusta el tamaño de la imagen en ancho
            ),
            SizedBox(height: 20), // Espacio entre el logo y el texto
            Text(
              'Bienvenido a $supermarketName', // Muestra un mensaje de bienvenida con el nombre del supermercado
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold), // Estilo del texto
            ),
            SizedBox(height: 20), // Espacio entre el texto y el botón
            ElevatedButton( // Crea un botón que llevará a la pantalla de la canasta básica
              onPressed: () {
                Navigator.push( // Acción de navegación al presionar el botón
                  context,
                  MaterialPageRoute(
                      builder: (context) => CanastaBasicaScreen()), // Ruta hacia la pantalla 'CanastaBasicaScreen'
                );
              },
              child: Text('Ver la canasta basica aqui:'), // Texto que aparece en el botón
            ),
          ],
        ),
      ),
    );
  }
}

// Clase que representa la pantalla con la lista de productos de la canasta básica
class CanastaBasicaScreen extends StatelessWidget {
  // Mapa que contiene las categorías de productos y sus elementos (cada categoría tiene una lista de productos)
  final Map<String, List<Map<String, String>>> categories = {
    'Alimentos': [ // Productos de la categoría "Alimentos"
      {'image': 'aceite.png', 'name': 'Aceite'},
      {'image': 'agua.png', 'name': 'Agua'},
      {'image': 'ajo.png', 'name': 'Ajo'},
      {'image': 'arroz.png', 'name': 'Arroz'},
      {'image': 'atun.png', 'name': 'Atún'},
      {'image': 'avena.png', 'name': 'Avena'},
      {'image': 'azucar.png', 'name': 'Azúcar'},
      {'image': 'brocoli.png', 'name': 'Brócoli'},
      {'image': 'cafe.png', 'name': 'Café'},
      {'image': 'camote.png', 'name': 'Camote'},
      {'image': 'carne_de_res.png', 'name': 'Carne de Res'},
      {'image': 'cebolla.png', 'name': 'Cebolla'},
      {'image': 'chile.png', 'name': 'Chile'},
      {'image': 'espinaca.png', 'name': 'Espinaca'},
      {'image': 'frijoles.png', 'name': 'Frijoles'},
      {'image': 'huevo.png', 'name': 'Huevo'},
      {'image': 'leche.png', 'name': 'Leche'},
      {'image': 'lentejas.png', 'name': 'Lentejas'},
      {'image': 'limon.png', 'name': 'Limón'},
      {'image': 'mantequilla.png', 'name': 'Mantequilla'},
      {'image': 'manzanas.png', 'name': 'Manzanas'},
      {'image': 'naranjas.png', 'name': 'Naranjas'},
      {'image': 'papa.png', 'name': 'Papa'},
      {'image': 'pescado.png', 'name': 'Pescado'},
      {'image': 'platano.png', 'name': 'Plátano'},
      {'image': 'pollo.png', 'name': 'Pollo'},
      {'image': 'sal.png', 'name': 'Sal'},
    ],
    'Limpieza': [ // Productos de la categoría "Limpieza"
      {'image': 'cloro.png', 'name': 'Cloro'},
      {'image': 'detergente.png', 'name': 'Detergente'},
      {'image': 'jabonb.png', 'name': 'Jabón Barra'},
      {'image': 'jabonp.png', 'name': 'Jabón Polvo'},
    ],
    'Higiene': [ // Productos de la categoría "Higiene"
      {'image': 'cepillod.png', 'name': 'Cepillo Dental'},
      {'image': 'papelh.png', 'name': 'Papel Higiénico'},
      {'image': 'pastad.png', 'name': 'Pasta Dental'},
    ],
    'Otros': [ // Productos de la categoría "Otros"
      {'image': 'cerillos.png', 'name': 'Cerillos'},
      {'image': 'jugon.png', 'name': 'Jugos'},
      {'image': 'hm.png', 'name': 'Harina de Maíz'},
      {'image': 'ht.png', 'name': 'Harina de Trigo'},
    ],
  };
}
@override
Widget build(BuildContext context) {
  return Scaffold(  // Estructura principal de la pantalla, que incluye barra superior y cuerpo
    appBar: AppBar(  // Barra superior de la pantalla
      title: Text('Canasta Básica'),  // Título que aparece en la barra superior
      backgroundColor: Colors.blueAccent,  // Color de fondo de la barra superior
    ),
    body: ListView(  // Crea una lista desplazable que contendrá las categorías y productos
      children: categories.entries.map((entry) {  // Itera sobre las categorías de productos
        return Column(  // Agrupa los widgets de cada categoría
          crossAxisAlignment: CrossAxisAlignment.start,  // Alineación de los elementos a la izquierda
          children: [
            Padding(  // Agrega espacio alrededor del texto de la categoría
              padding: const EdgeInsets.all(8.0),  // Espacio de padding
              child: Text(
                entry.key,  // Nombre de la categoría
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),  // Estilo de texto para la categoría
              ),
            ),
            GridView.builder(  // Crea una rejilla para mostrar los productos de la categoría
              shrinkWrap: true,  // Hace que la vista en rejilla se ajuste al tamaño de los elementos
              physics: NeverScrollableScrollPhysics(),  // Deshabilita el desplazamiento de la rejilla
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(  // Configura la distribución en la rejilla
                crossAxisCount: 3,  // Número de columnas en la rejilla
                crossAxisSpacing: 8.0,  // Espacio entre las columnas
                mainAxisSpacing: 8.0,  // Espacio entre las filas
              ),
              itemCount: entry.value.length,  // Número de productos en la categoría
              itemBuilder: (context, index) {  // Construye cada celda de la rejilla
                final item = entry.value[index];  // Obtiene el producto de la categoría
                return Column(  // Agrupa la imagen y el nombre del producto
                  children: [
                    Expanded(  // Hace que la imagen ocupe todo el espacio disponible
                      child: Image.asset(
                        'assets/${item['image']}',  // Ruta de la imagen del producto
                        fit: BoxFit.cover,  // Ajuste de la imagen para cubrir el espacio
                      ),
                    ),
                    SizedBox(height: 4.0),  // Espacio entre la imagen y el nombre del producto
                    Text(
                      item['name']!,  // Muestra el nombre del producto
                      textAlign: TextAlign.center,  // Alinea el texto al centro
                      style: TextStyle(fontSize: 14),  // Estilo de texto para el nombre del producto
                    ),
                  ],
                );
              },
            ),
          ],
        );
      }).toList(),  // Convierte las entradas de categoría en una lista de widgets
    ),
  );
}

class SupermercadoPage extends StatelessWidget {
  final String name;  // Nombre del supermercado
  final Color color;  // Color personalizado para la barra superior
  final String info;  // Información adicional sobre el supermercado

  SupermercadoPage(
      {required this.name, required this.color, required this.info});  // Constructor que recibe los parámetros

  @override
  Widget build(BuildContext context) {
    return Scaffold(  // Estructura principal de la pantalla, con barra superior y cuerpo
      appBar: AppBar(
        title: Text('Bienvenido a $name'),  // Título dinámico con el nombre del supermercado
        backgroundColor: color,  // Usa el color personalizado para la barra superior
      ),
      body: Center(  // Centra el contenido dentro de la pantalla
        child: Column(  // Organiza los elementos de manera vertical
          mainAxisAlignment: MainAxisAlignment.center,  // Centra los elementos verticalmente
          children: [
            Text(
              'Precio de la canasta básica en $name:',  // Muestra el nombre del supermercado
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),  // Estilo de texto para el título
            ),
            SizedBox(height: 20),  // Espacio entre el título y el botón
            ElevatedButton(  // Botón para mostrar el precio de la canasta básica
              onPressed: () {
                showDialog(  // Muestra un cuadro de diálogo con el precio
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: Text('Precio de la Canasta Básica'),  // Título del cuadro de diálogo
                      content: Text(''),  // Contenido vacío (aquí se puede mostrar el precio dinámicamente)
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.of(context).pop();  // Cierra el cuadro de diálogo
                          },
                          child: Text('Cerrar'),  // Botón para cerrar el cuadro de diálogo
                        ),
                      ],
                    );
                  },
                );
              },
              child: Text('Mostrar precio'),  // Texto que aparece en el botón
            ),
            SizedBox(height: 20),  // Espacio entre el botón y el siguiente texto
            Text(
              info,  // Muestra la información adicional del supermercado
              style: TextStyle(fontSize: 16),  // Estilo de texto para la información adicional
            ),
            ElevatedButton(  // Botón para volver a la pantalla anterior
              onPressed: () {
                Navigator.pop(context);  // Acción para regresar a la pantalla anterior
              },
              child: Text('Volver'),  // Texto que aparece en el botón
            ),
          ],
        ),
      ),
    );
  }
}
//----------------------------------------------------
// Pantallas de navegación ejemplo

// Clase que representa la pantalla de la lista de compras
class ShoppingListScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título centrado y color de fondo teal
      appBar: AppBar(
        title: Center(child: Text('Lista de Compras')), // Título centrado
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0), // Espaciado alrededor del contenido
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center, // Centra los elementos en el eje horizontal
          children: [
            SizedBox(height: 16), // Espacio inicial
            // Contenedor con mensaje de bienvenida
            Container(
              padding: const EdgeInsets.all(16.0), // Espaciado interno
              decoration: BoxDecoration(
                color: Colors.teal, // Color de fondo del contenedor
                borderRadius: BorderRadius.circular(8.0), // Bordes redondeados
              ),
              child: Text(
                'Hola, espero que tengas un buen día',
                style: TextStyle(color: Color(0xFFFFD700), fontSize: 18), // Estilo del texto
                textAlign: TextAlign.center, // Centra el texto
              ),
            ),
            SizedBox(height: 24), // Espacio entre elementos
            // Etiqueta explicativa
            Text(
              'En el recuadro de abajo pon los artículos que sueles comprar cada semana.',
              style: TextStyle(fontSize: 16), // Estilo del texto
              textAlign: TextAlign.center, // Centra el texto
            ),
            SizedBox(height: 24),
            // Contenedor que simula una hoja de cuaderno para ingresar artículos
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey), // Borde gris
                  borderRadius: BorderRadius.circular(8.0), // Bordes redondeados
                ),
                padding: const EdgeInsets.symmetric(vertical: 8.0), // Espaciado vertical
                child: ListView.builder(
                  itemCount: 20, // Número de líneas para ingresar artículos
                  itemBuilder: (context, index) {
                    return ListTile(
                      leading: Text(
                        '${index + 1}.', // Número de la línea
                        style: TextStyle(fontSize: 16), // Estilo del texto
                      ),
                      title: TextField(
                        decoration: InputDecoration(
                          hintText: 'Escribe aquí...', // Texto de sugerencia
                          border: InputBorder.none, // Sin borde
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
            SizedBox(height: 16),
            // Botón para guardar la lista
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal, // Color de fondo del botón
              ),
              onPressed: () {
                // Mostrar ventana emergente al presionar el botón
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: Text('Lista Guardada'),
                      content: Text(
                        'Tu lista ha sido guardada con la intención de encuestar los artículos más comprados.',
                      ),
                      actions: [
                        TextButton(
                          child: Text('Salir'),
                          onPressed: () {
                            Navigator.pop(context); // Cierra la ventana emergente
                            Navigator.pop(context); // Regresa a la pantalla anterior
                          },
                        ),
                      ],
                    );
                  },
                );
              },
              child: Text('Guardar'), // Texto del botón
            ),
          ],
        ),
      ),
    );
  }
}

// Clase que representa la pantalla con los productos más vendidos
class BestSellingProductsScreen extends StatelessWidget {
  // Lista de los 10 productos más vendidos con sus imágenes y nombres
  final List<Map<String, String>> top10Products = [
    {'image': 'assets/aceite.png', 'name': 'Aceite'},
    {'image': 'assets/arroz.png', 'name': 'Arroz'},
    {'image': 'assets/atun.png', 'name': 'Atún'},
    {'image': 'assets/avena.png', 'name': 'Avena'},
    {'image': 'assets/azucar.png', 'name': 'Azúcar'},
    {'image': 'assets/frijoles.png', 'name': 'Frijoles'},
    {'image': 'assets/huevo.png', 'name': 'Huevo'},
    {'image': 'assets/leche.png', 'name': 'Leche'},
    {'image': 'assets/detergente.png', 'name': 'Detergente'},
    {'image': 'assets/cepillod.png', 'name': 'Cepillo Dental'},
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título y color de fondo teal
      appBar: AppBar(
        title: Text('Top 10 Productos Más Vendidos'),
        backgroundColor: Color(0xFF008080),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0), // Espaciado alrededor del contenido
        child: ListView.builder(
          itemCount: top10Products.length, // Número de productos en la lista
          itemBuilder: (context, index) {
            return Card(
              margin: EdgeInsets.symmetric(vertical: 10), // Espaciado vertical entre tarjetas
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10), // Bordes redondeados
              ),
              elevation: 5, // Sombra de la tarjeta
              child: ListTile(
                leading: Image.asset(
                  top10Products[index]['image']!, // Imagen del producto
                  width: 50, // Ancho de la imagen
                  height: 50, // Alto de la imagen
                  fit: BoxFit.cover, // Ajuste de la imagen
                ),
                title: Text(
                  top10Products[index]['name']!, // Nombre del producto
                  style: TextStyle(
                    fontSize: 18, // Tamaño de la fuente
                    fontWeight: FontWeight.bold, // Negrita
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
class BudgetScreen extends StatelessWidget {
  // Controlador para el campo de texto donde el usuario ingresará el monto
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título y color de fondo azul
      appBar: AppBar(
        title: Text("Calculadora de presupuesto"),
        backgroundColor: Colors.blue,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0), // Espaciado alrededor del contenido
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center, // Centra los elementos en el eje vertical
            children: [
              // Título que solicita al usuario ingresar su presupuesto familiar
              Text(
                '¿Cuál es tu presupuesto familiar?',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Subtítulo que indica al usuario que ingrese el monto utilizado para el presupuesto
              Text(
                'Ingresa el monto utilizado para hacer tu presupuesto:',
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 10), // Espacio entre elementos
              // Campo de texto para que el usuario ingrese el monto
              TextField(
                controller: _controller, // Asocia el controlador al campo de texto
                keyboardType: TextInputType.number, // Configura el teclado para ingresar números
                decoration: InputDecoration(
                  border: OutlineInputBorder(), // Borde alrededor del campo de texto
                  hintText: 'Ingresa un monto', // Texto de sugerencia
                ),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Texto que indica al usuario que, basado en su presupuesto, se le sugerirán opciones de compra
              Text(
                'En base a tu presupuesto te decimos dónde puedes comprar tu despensa.',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Botón que al presionarlo calcula las opciones de mercado basadas en el presupuesto ingresado
              ElevatedButton(
                onPressed: () {
                  // Intenta convertir el texto ingresado a un número entero
                  final input = int.tryParse(_controller.text);
                  // Verifica que el monto ingresado sea válido y tenga al menos 3 dígitos
                  if (input != null && input >= 100) {
                    // Define los costos de la canasta básica en diferentes supermercados
                    final supermarkets = {
                      'Merco': 1200,
                      'Soriana': 1500,
                      'Gutierrez': 1450,
                      'Walmart': 1850,
                    };

                    // Listas para almacenar los supermercados que están dentro y fuera del presupuesto
                    List<String> nearby = [];
                    List<String> farAway = [];

                    // Clasifica los supermercados según el presupuesto ingresado
                    supermarkets.forEach((supermarket, cost) {
                      // Si el presupuesto está dentro de un rango de ±200 del costo del supermercado, se considera cercano
                      if (input >= cost - 200 && input <= cost + 200) {
                        nearby.add(supermarket);
                      } else {
                        farAway.add(supermarket);
                      }
                    });

                    // Muestra un cuadro de diálogo con las opciones de mercado
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('Opciones de mercado'),
                        content: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            // Si hay supermercados dentro del presupuesto, muestra la lista
                            if (nearby.isNotEmpty)
                              Text(
                                  'Tu presupuesto me dice que puedes comprar en:'),
                            ...nearby.map((supermarket) => Text(supermarket)),
                            // Si hay supermercados fuera del presupuesto, muestra la lista
                            if (nearby.isNotEmpty && farAway.isNotEmpty)
                              SizedBox(height: 20),
                            if (farAway.isNotEmpty)
                              Text(
                                  'Tu presupuesto no alcanza para comprar aquí'),
                            ...farAway.map((supermarket) => Text(supermarket)),
                          ],
                        ),
                        actions: [
                          // Botón para cerrar el cuadro de diálogo
                          IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () {
                              Navigator.pop(context); // Cierra el cuadro de diálogo
                            },
                          ),
                        ],
                      ),
                    );
                  } else {
                    // Si el monto ingresado no es válido, muestra un mensaje de error
                    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                      content: Text(
                          'Por favor, ingresa un monto válido de al menos 3 cifras.'),
                    ));
                  }
                },
                child: Text('Calcular'), // Texto del botón
              ),
            ],
          ),
        ),
      ),
    );
  }
}
class BudgetScreen extends StatelessWidget {
  // Controlador para el campo de texto donde el usuario ingresará el monto
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título y color de fondo azul
      appBar: AppBar(
        title: Text("Calculadora de presupuesto"),
        backgroundColor: Colors.blue,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0), // Espaciado alrededor del contenido
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center, // Centra los elementos en el eje vertical
            children: [
              // Título que solicita al usuario ingresar su presupuesto familiar
              Text(
                '¿Cuál es tu presupuesto familiar?',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Subtítulo que indica al usuario que ingrese el monto utilizado para el presupuesto
              Text(
                'Ingresa el monto utilizado para hacer tu presupuesto:',
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 10), // Espacio entre elementos
              // Campo de texto para que el usuario ingrese el monto
              TextField(
                controller: _controller, // Asocia el controlador al campo de texto
                keyboardType: TextInputType.number, // Configura el teclado para ingresar números
                decoration: InputDecoration(
                  border: OutlineInputBorder(), // Borde alrededor del campo de texto
                  hintText: 'Ingresa un monto', // Texto de sugerencia
                ),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Texto que indica al usuario que, basado en su presupuesto, se le sugerirán opciones de compra
              Text(
                'En base a tu presupuesto te decimos dónde puedes comprar tu despensa.',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 20), // Espacio entre elementos
              // Botón que al presionarlo calcula las opciones de mercado basadas en el presupuesto ingresado
              ElevatedButton(
                onPressed: () {
                  // Intenta convertir el texto ingresado a un número entero
                  final input = int.tryParse(_controller.text);
                  // Verifica que el monto ingresado sea válido y tenga al menos 3 dígitos
                  if (input != null && input >= 100) {
                    // Define los costos de la canasta básica en diferentes supermercados
                    final supermarkets = {
                      'Merco': 1200,
                      'Soriana': 1500,
                      'Gutierrez': 1450,
                      'Walmart': 1850,
                    };

                    // Listas para almacenar los supermercados que están dentro y fuera del presupuesto
                    List<String> nearby = [];
                    List<String> farAway = [];

                    // Clasifica los supermercados según el presupuesto ingresado
                    supermarkets.forEach((supermarket, cost) {
                      // Si el presupuesto está dentro de un rango de ±200 del costo del supermercado, se considera cercano
                      if (input >= cost - 200 && input <= cost + 200) {
                        nearby.add(supermarket);
                      } else {
                        farAway.add(supermarket);
                      }
                    });

                    // Muestra un cuadro de diálogo con las opciones de mercado
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('Opciones de mercado'),
                        content: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            // Si hay supermercados dentro del presupuesto, muestra la lista
                            if (nearby.isNotEmpty)
                              Text(
                                  'Tu presupuesto me dice que puedes comprar en:'),
                            ...nearby.map((supermarket) => Text(supermarket)),
                            // Si hay supermercados fuera del presupuesto, muestra la lista
                            if (nearby.isNotEmpty && farAway.isNotEmpty)
                              SizedBox(height: 20),
                            if (farAway.isNotEmpty)
                              Text(
                                  'Tu presupuesto no alcanza para comprar aquí'),
                            ...farAway.map((supermarket) => Text(supermarket)),
                          ],
                        ),
                        actions: [
                          // Botón para cerrar el cuadro de diálogo
                          IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () {
                              Navigator.pop(context); // Cierra el cuadro de diálogo
                            },
                          ),
                        ],
                      ),
                    );
                  } else {
                    // Si el monto ingresado no es válido, muestra un mensaje de error
                    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                      content: Text(
                          'Por favor, ingresa un monto válido de al menos 3 cifras.'),
                    ));
                  }
                },
                child: Text('Calcular'), // Texto del botón
              ),
            ],
          ),
        ),
      ),
    );
  }
}
// Pantalla principal del menú
class MenuScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título "Menú" y color de fondo azul
      appBar: AppBar(
        title: Text("Menú"),
        backgroundColor: Colors.blue,
      ),
      // Cuerpo de la pantalla que muestra una lista de opciones
      body: ListView(
        children: [
          // Elemento de la lista para navegar a la pantalla de contacto
          ListTile(
            title: Text('Contáctanos'), // Texto del elemento
            onTap: () {
              // Navega a la pantalla de contacto al tocar el elemento
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => ContactScreen()),
              );
            },
          ),
          // Elemento de la lista que muestra información sobre la app
          ListTile(
            title: Text('Acerca de la app'), // Texto del elemento
            onTap: () {
              // Muestra un cuadro de diálogo con información de la aplicación
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: Text('Bendiciones'), // Título del diálogo
                  content: Column(
                    mainAxisSize: MainAxisSize.min, // Ajusta el tamaño del contenido
                    children: [
                      // Descripción breve de la finalidad de la app
                      Text(
                          'Esta app busca ayudarte a combatir la inflación al comparar precios de la canasta básica.'),
                      SizedBox(height: 20), // Espacio entre elementos
                      // Información adicional sobre la app
                      Text(
                        'Ahorro Express es una app en desarrollo sin fines de lucro, pensada para favorecer la economía de los mexicanos.',
                        textAlign: TextAlign.center, // Centra el texto
                      ),
                      SizedBox(height: 20), // Espacio entre elementos
                      // Información de derechos reservados
                      Text('Ahorro Express 2024c.'),
                    ],
                  ),
                  actions: [
                    // Botón para cerrar el cuadro de diálogo
                    TextButton(
                      onPressed: () {
                        Navigator.pop(context); // Cierra el cuadro de diálogo
                      },
                      child: Text('Cerrar'), // Texto del botón
                    ),
                  ],
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}

// Pantalla de contacto
class ContactScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de la aplicación con título "Contáctanos" y color de fondo azul
      appBar: AppBar(
        title: Text('Contáctanos'),
        backgroundColor: Colors.blue,
      ),
      // Cuerpo de la pantalla con información de contacto
      body: Padding(
        padding: const EdgeInsets.all(16.0), // Espaciado alrededor del contenido
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start, // Alinea el contenido a la izquierda
          children: [
            // Nombre de la empresa
            Text(
              'Empresa: Ahorro Express Software',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 10), // Espacio entre elementos
            // Información de contacto: email, teléfono y dirección
            Text('Email: contacto@ahorroexpress.com'),
            Text('Teléfono: +52 55 1234 5678'),
            Text('Dirección: Calle Falsa 123, Ciudad de México, MX'),
          ],
        ),
      ),
    );
  }
}
